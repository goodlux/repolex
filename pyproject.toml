[project]
name = "codedoc"
version = "2.0.0"
description = "ðŸŸ¡ PAC-MAN for your codebase! Semantic code intelligence that eats all the complexity."
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Rob", email = "rob@example.com"}
]
keywords = [
    "semantic-analysis", 
    "code-intelligence", 
    "documentation", 
    "rdf", 
    "sparql", 
    "ast-parsing",
    "pac-man",
    "oxigraph"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    # CLI/TUI Framework
    "click>=8.0",           # CLI framework
    "textual>=0.50",        # TUI framework - PAC-MAN dashboard!
    "rich>=13.0",           # Beautiful CLI output - make it colorful!
    
    # Semantic Database
    "pyoxigraph==0.4.9",    # RDF database - the semantic powerhouse
    
    # Git Operations
    "GitPython>=3.1",       # Git operations - chase those commits!
    
    # Data & Export
    "msgpack>=1.0",         # Compact serialization - semantic DNA
    "lxml>=4.9",            # XML processing for OPML
    "pydantic>=2.0",        # Data validation - keep it clean
    
    # Async & File Operations
    "aiofiles>=23.0",       # Async file operations
    
    # Logging & Monitoring
    "loguru>=0.7",          # Enhanced logging - track PAC-MAN's path
    "psutil>=5.9",          # System monitoring - PAC-MAN's arcade cabinet health
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    
    # Code Quality
    "black>=23.0",          # Code formatting
    "ruff>=0.1",            # Fast linting
    "mypy>=1.0",            # Type checking
    
    # Documentation
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
]

[project.scripts]
codedoc = "codedoc.__main__:main"

[project.urls]
Homepage = "https://github.com/your-username/codedoc"
Repository = "https://github.com/your-username/codedoc"
Issues = "https://github.com/your-username/codedoc/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["codedoc"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

# Ruff configuration  
[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["codedoc"]
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
